version: '3.8'

services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
    container_name: tni_frontend
    ports:
      - "3000:3000"
    env_file:
      - ./frontend/.env
    restart: unless-stopped
    networks:
      - app-network

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: tni_backend
    ports:
      - "8080:8080"
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      - DOCKER_ENV=true
      - DEBUG=${DEBUG:-false}
      - SECRET_KEY=${SECRET_KEY}
    env_file:
      - .env
    restart: unless-stopped
    networks:
      - app-network
    depends_on:
      db:
        condition: service_healthy

  db:
    image: postgres:17-alpine3.21
    container_name: tni_postgres_db
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "${DB_PORT:-5435}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

volumes:
  postgres_data:

networks:
  app-network:
    driver: bridge